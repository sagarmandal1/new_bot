"""
‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶¨‡¶ü ‡¶°‡ßá‡¶Æ‡ßã ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü
Bengali Bot Demo Script

‡¶è‡¶á ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶™‡ßç‡¶∞‡¶¶‡¶∞‡ßç‡¶∂‡¶® ‡¶ï‡¶∞‡ßá
This script demonstrates the main features of the bot
"""

import asyncio
import sys
import os

# Add current directory to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config.database import db
from modules.utils.localization import i18n, _
from modules.utils.bengali_calendar import bengali_calendar
from modules.utils.security import security

# Try to import task managers, use mocks if not available
try:
    from modules.tasks.task_manager import TaskManager
    from modules.notifications.notification_manager import NotificationManager
    from modules.gamification.game_manager import GameManager
    FULL_FEATURES = True
except ImportError:
    # Mock managers for demo
    class MockTaskManager:
        async def create_task(self, *args, **kwargs): return None
        async def get_user_tasks(self, *args, **kwargs): return []
        async def get_task_statistics(self, *args, **kwargs): 
            return {'total_tasks': 3, 'completed_tasks': 1, 'pending_tasks': 2, 'overdue_tasks': 0, 'completion_rate': 33.33}
    
    class MockNotificationManager:
        async def get_daily_motivational_quote(self, lang): return "üí™ ‡¶∏‡¶´‡¶≤‡¶§‡¶æ ‡¶Ü‡¶∏‡ßá ‡¶ß‡ßà‡¶∞‡ßç‡¶Ø ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶†‡¶ø‡¶® ‡¶™‡¶∞‡¶ø‡¶∂‡ßç‡¶∞‡¶Æ‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá‡•§"
        async def generate_daily_summary(self, user_id): return "üìä ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™: ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡ß´‡¶ü‡¶ø ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡ß©‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!"
    
    class MockGameManager:
        async def get_daily_quiz(self): 
            return {
                'question': '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶∞‡¶æ‡¶ú‡¶ß‡¶æ‡¶®‡ßÄ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶ï‡ßÄ?',
                'options': ['‡¶¢‡¶æ‡¶ï‡¶æ', '‡¶ö‡¶ü‡ßç‡¶ü‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ', '‡¶∏‡¶ø‡¶≤‡ßá‡¶ü', '‡¶ñ‡ßÅ‡¶≤‡¶®‡¶æ'],
                'correct': 0,
                'points': 10
            }
        async def get_leaderboard(self): 
            return [
                {'rank': 1, 'name': '‡¶∞‡¶π‡¶ø‡¶Æ ‡¶â‡¶¶‡ßç‡¶¶‡¶ø‡¶®', 'points': 500, 'level': 5},
                {'rank': 2, 'name': '‡¶´‡¶æ‡¶§‡¶ø‡¶Æ‡¶æ ‡¶ñ‡¶æ‡¶§‡ßÅ‡¶®', 'points': 450, 'level': 4},
                {'rank': 3, 'name': '‡¶ï‡¶∞‡¶ø‡¶Æ ‡¶â‡¶≤‡ßç‡¶≤‡¶æ‡¶π', 'points': 400, 'level': 4}
            ]
    
    TaskManager = MockTaskManager
    NotificationManager = MockNotificationManager
    GameManager = MockGameManager
    FULL_FEATURES = False
    print("‚ö†Ô∏è Using mock managers for demo (install dependencies for full features)")

def print_header(title):
    """Print formatted header"""
    print("\n" + "="*60)
    print(f"üáßüá© {title}")
    print("="*60)

def demo_localization():
    """Demonstrate Bengali localization"""
    print_header("‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶°‡ßá‡¶Æ‡ßã (Bengali Language Support Demo)")
    
    # Show welcome message
    welcome = _('welcome.greeting', lang_code='bn')
    print(f"‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ: {welcome}")
    
    # Show various menu items
    print("\n‡¶Æ‡ßá‡¶®‡ßÅ ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ‡¶∏‡¶Æ‡ßÇ‡¶π:")
    menus = ['tasks', 'calendar', 'profile', 'notifications', 'games', 'help']
    for menu in menus:
        text = _(f'menus.main_menu.{menu}', lang_code='bn')
        print(f"  ‚Ä¢ {text}")
    
    # Show task priorities
    print("\n‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶Ö‡¶ó‡ßç‡¶∞‡¶æ‡¶ß‡¶ø‡¶ï‡¶æ‡¶∞:")
    priorities = ['low', 'medium', 'high', 'urgent']
    for priority in priorities:
        text = _(f'tasks.priority.{priority}', lang_code='bn')
        print(f"  ‚Ä¢ {text}")

def demo_bengali_calendar():
    """Demonstrate Bengali calendar features"""
    print_header("‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶°‡ßá‡¶Æ‡ßã (Bengali Calendar Demo)")
    
    # Get current Bengali date
    date_info = bengali_calendar.get_bengali_date()
    
    print(f"üóìÔ∏è  ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: {date_info['bengali_date']}")
    print(f"üìÜ  ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: {date_info['english_date']}")  
    print(f"üìÖ  ‡¶¨‡¶æ‡¶∞: {date_info['bengali_weekday']}")
    print(f"üå∏  ‡¶ã‡¶§‡ßÅ: {date_info['season']}")
    print(f"‚è∞  ‡¶∏‡¶Æ‡¶Ø‡¶º: {date_info['english_time']}")
    
    # Show upcoming events
    events = bengali_calendar.get_upcoming_events()
    if events:
        print("\nüéâ ‡¶Ü‡¶∏‡¶®‡ßç‡¶® ‡¶Ö‡¶®‡ßÅ‡¶∑‡ßç‡¶†‡¶æ‡¶®‡¶∏‡¶Æ‡ßÇ‡¶π:")
        for event in events:
            print(f"  ‚Ä¢ {event['name']} - {event['bengali_date']}")

def demo_security():
    """Demonstrate security features"""  
    print_header("‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶§‡ßç‡¶§‡¶æ ‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø ‡¶°‡ßá‡¶Æ‡ßã (Security Features Demo)")
    
    # Test encryption
    original_text = "‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ"
    encrypted = security.encrypt_data(original_text)
    decrypted = security.decrypt_data(encrypted)
    
    print(f"‡¶Æ‡ßÇ‡¶≤ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü: {original_text}")
    print(f"‡¶è‡¶®‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü‡ßá‡¶°: {encrypted[:50]}...")
    print(f"‡¶°‡¶ø‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü‡ßá‡¶°: {decrypted}")
    print(f"‚úÖ ‡¶è‡¶®‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® {'‡¶∏‡¶´‡¶≤' if original_text == decrypted else '‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•'}")
    
    # Test password hashing
    password = "my_secure_password"
    hashed = security.hash_password(password)
    verified = security.verify_password(password, hashed)
    
    print(f"\n‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°: {password}")
    print(f"‡¶π‡ßç‡¶Ø‡¶æ‡¶∂: {hashed[:50]}...")
    print(f"‚úÖ ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® {'‡¶∏‡¶´‡¶≤' if verified else '‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•'}")
    
    # Test token generation
    token = security.generate_secure_token(16)
    print(f"\n‡¶∏‡¶ø‡¶ï‡¶ø‡¶â‡¶∞ ‡¶ü‡ßã‡¶ï‡ßá‡¶®: {token}")

async def demo_task_management():
    """Demonstrate task management"""
    print_header("‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶°‡ßá‡¶Æ‡ßã (Task Management Demo)")
    
    task_manager = TaskManager()
    
    # Create sample tasks
    print("üìù ‡¶®‡¶Æ‡ßÅ‡¶®‡¶æ ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    
    sample_tasks = [
        {
            'title': '‡¶¨‡¶á ‡¶™‡¶°‡¶º‡¶æ',
            'description': '‡¶ó‡ßÄ‡¶§‡¶æ ‡¶™‡¶°‡¶º‡¶æ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ',
            'priority': 'high',
            'category': 'education'
        },
        {
            'title': '‡¶¶‡ßÅ‡¶ß ‡¶ï‡¶ø‡¶®‡¶§‡ßá ‡¶π‡¶¨‡ßá', 
            'description': '‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶¶‡ßÅ‡¶ß ‡¶ï‡¶ø‡¶®‡ßá ‡¶Ü‡¶®‡¶æ',
            'priority': 'medium',
            'category': 'shopping'
        },
        {
            'title': '‡¶°‡¶æ‡¶ï‡ßç‡¶§‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ',
            'description': '‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶ö‡ßá‡¶ï‡¶Ü‡¶™',
            'priority': 'urgent', 
            'category': 'health'
        }
    ]
    
    user_id = 123456789  # Mock user ID
    created_tasks = []
    
    for task_data in sample_tasks:
        # In a real scenario, this would create in database
        print(f"  ‚úÖ {task_data['title']} - {_('tasks.priority.' + task_data['priority'], lang_code='bn')}")
        created_tasks.append(task_data)
    
    # Show statistics
    stats = {
        'total_tasks': len(created_tasks),
        'completed_tasks': 1,
        'pending_tasks': 2,
        'overdue_tasks': 0,
        'completion_rate': 33.33
    }
    
    print(f"\nüìä ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®:")
    print(f"  ‚Ä¢ ‡¶Æ‡ßã‡¶ü ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï: {stats['total_tasks']}")
    print(f"  ‚Ä¢ ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®: {stats['completed_tasks']}")
    print(f"  ‚Ä¢ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶Æ‡¶æ‡¶£: {stats['pending_tasks']}")
    print(f"  ‚Ä¢ ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®‡ßá‡¶∞ ‡¶π‡¶æ‡¶∞: {stats['completion_rate']:.1f}%")

async def demo_notifications():
    """Demonstrate notification system"""
    print_header("‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶°‡ßá‡¶Æ‡ßã (Notification System Demo)")
    
    notification_manager = NotificationManager()
    
    # Get daily quote
    quote = await notification_manager.get_daily_motivational_quote('bn')
    print(f"‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶™‡ßç‡¶∞‡ßá‡¶∞‡¶£‡¶æ:")
    print(f"  {quote}")
    
    # Show summary
    summary = await notification_manager.generate_daily_summary(123456789)
    print(f"\n‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™:")
    print(f"  {summary}")

async def demo_gamification():
    """Demonstrate gamification features"""
    print_header("‡¶ó‡ßá‡¶Æ‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶°‡ßá‡¶Æ‡ßã (Gamification Demo)")
    
    game_manager = GameManager()
    
    # Show daily quiz
    quiz = await game_manager.get_daily_quiz()
    print(f"üß† ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ï‡ßÅ‡¶á‡¶ú:")
    print(f"‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®: {quiz['question']}")
    print("‡¶Ö‡¶™‡¶∂‡¶®‡¶∏‡¶Æ‡ßÇ‡¶π:")
    for i, option in enumerate(quiz['options']):
        marker = "‚úÖ" if i == quiz['correct'] else "  "
        print(f"  {chr(65+i)}) {option} {marker}")
    print(f"‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü: {quiz['points']}")
    
    # Show leaderboard
    leaderboard = await game_manager.get_leaderboard()
    print(f"\nüèÜ ‡¶≤‡¶ø‡¶°‡¶æ‡¶∞‡¶¨‡ßã‡¶∞‡ßç‡¶°:")
    for entry in leaderboard:
        medal = "ü•á" if entry['rank'] == 1 else "ü•à" if entry['rank'] == 2 else "ü•â" if entry['rank'] == 3 else f"{entry['rank']}."
        print(f"  {medal} {entry['name']} - {entry['points']} ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü (‡¶≤‡ßá‡¶≠‡ßá‡¶≤ {entry['level']})")

def demo_database():
    """Demonstrate database setup"""
    print_header("‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ‡¶°‡ßá‡¶Æ‡ßã (Database Setup Demo)")
    
    # Create tables
    db.create_tables()
    print("‚úÖ ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
    
    # Show available models
    models = ['User', 'Task', 'Notification', 'ActivityLog', 'Quote', 'GameScore', 'BugReport']
    print("\nüìä ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶Æ‡¶°‡ßá‡¶≤‡¶∏‡¶Æ‡ßÇ‡¶π:")
    for model in models:
        print(f"  ‚Ä¢ {model}")

async def main():
    """Main demo function"""
    print("üáßüá© ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï ‡¶¨‡¶ü ‡¶°‡ßá‡¶Æ‡ßã ‡¶∂‡ßÅ‡¶∞‡ßÅ")
    print("üáßüá© Bengali Assistant Bot Demo Starting")
    print("="*60)
    
    # Run all demos
    demo_localization()
    demo_bengali_calendar()
    demo_security()
    await demo_task_management()
    await demo_notifications()
    await demo_gamification()
    demo_database()
    
    print_header("‡¶°‡ßá‡¶Æ‡ßã ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® (Demo Complete)")
    print("üéâ ‡¶∏‡¶¨ ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßç‡¶∞‡¶¶‡¶∞‡ßç‡¶∂‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
    print("üéâ All features demonstrated successfully!")
    print("\nüìã ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶ß‡¶æ‡¶™ (Next Steps):")
    print("1. .env ‡¶´‡¶æ‡¶á‡¶≤‡ßá TELEGRAM_BOT_TOKEN ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®")
    print("2. python seed_data.py ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®")
    print("3. python main.py ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®")
    print("\nüí° ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ó‡¶æ‡¶á‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø README.md ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®")

if __name__ == "__main__":
    asyncio.run(main())